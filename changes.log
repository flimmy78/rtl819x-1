---------------------------------------------------------------------------------------------------------------
注：在编译rtl819x目录(直接make)时,会自动编译一次boot(即bootcode_rtl8196c_98目录)
---------------------------------------------------------------------------------------------------------------


<1>  增加支持备份分区功能
<2>  XXXXXXX




***************************************************修改记录 <1> **************************************************

<1>  增加支持备份分区功能
#define HW_SETTING_OFFSET	0x6000
#define DEFAULT_SETTING_OFFSET	0x8000
#define CURRENT_SETTING_OFFSET	0xc000


#define CONFIG_LINUX_IMAGE_OFFSET_START 0x10000
#define CONFIG_LINUX_IMAGE_OFFSET_END 0x40000
#define CONFIG_LINUX_IMAGE_OFFSET_STEP 0x1000
#define CONFIG_ROOT_IMAGE_OFFSET_START 0xE0000
#define CONFIG_ROOT_IMAGE_OFFSET_END 0x130000
#define CONFIG_ROOT_IMAGE_OFFSET_STEP 0x1000
#define CONFIG_BOOT_CODE_SIZE_CHECK 1
#define CONFIG_BOOT_CODE_SIZE 0x6000


#define MTD_BOOT_OFFSET  0x00000
#define MTD_BOOT_SIZE 0x6000
#define MTD_KERNEL_OFFSET 0x30000
#define MTD_KERNEL_SIZE  (0x130000 - MTD_KERNEL_OFFSET)

#define MTD_BOOT "/dev/mtd0"
#define MTD_KERNEL "/dev/mtd0"
#define MTD_ROOTFS "/dev/mtd1"
#define MTD_ROOTFS1 "/dev/mtd4"


#define MTDBLOCK_BOOT "/dev/mtdblock0"
#define MTDBLOCK_KERNEL "/dev/mtdblock0"
#define MTDBLOCK_ROOTFS  "/dev/mtdblock1"
#define MTDBLOCK_ROOTFS1 "/dev/mtdblock4"

[boot修改]： 目录-->bootcode_rtl8196c_98

原来保存镜像的flash地址分配是：

0x00000000   --   0x00006000   --boot
0x00006000   --   0x00010000   --cfg,比如MAC，IP address
0x00010000   --   0x00030000   --webpages 
0x00030000   --   0x00130000   --linux kernel
0x00130000   --   0x003E0000   --linux rootfs
0x003E0000   --   0x00400000   --nvram
0x00400000   --   0x00530000   --linux kernel1，但是没有用到
0x00530000   --   0x007E0000   --linux rootfs1，但是没有用到
0x007E0000   --   0x00530000   --config


修改后的地址分配是：
原来保存镜像的flash地址分配是：

0x00000000   --   0x00006000   --boot
0x00006000   --   0x00010000   --cfg,比如MAC，IP address
0x00010000   --   0x00030000   --webpages 
0x00030000   --   0x00130000   --linux kernel
0x00130000   --   0x003E0000   --linux rootfs
0x003E0000   --   0x00400000   --nvram
0x00400000   --   0x00404000   --cfg2,比如bootflag等
0x00404000   --   0x00530000   --linux kernel1
0x00530000   --   0x007E0000   --linux rootfs1
0x007E0000   --   0x00530000   --config


在boot下升级时，需要升级fw.bin文件，才能在升级完成后自动重启时，从linux kernel1 或者 linux kernel起来

修改函数主要有：
checkAutoFlashing  --增加变量使用 int bootflag = 0,fl_size = 0;

在monitor.c文件中，增加两个命令：fl 0x400000 / fw 0x400000 1/ fw 0x400000 0   可以手动改变启动分区fl --flash read, fw---flash write



[kernel改动]

的文件是：/opt/workspace/rtl8198/rtl819x/linux-2.6.30/drivers/mtd/maps/rtl819x_flash.c
增加分区：


#define EOC_CFG_EXT_NAME    "cfg-ext"
#define EOC_CFG_EXT_SIZE    CONFIG_CFG_EXT_SIZE 
#define EOC_CFG_EXT_OFFSET  (EOC_NVRAM0_OFFSET + EOC_NVRAM0_SIZE)


rtl8198/rtl819x/linux-2.6.30/include/linux/autoconf.h :
#define CONFIG_CFG_EXT_SIZE 0x4000 
#define CONFIG_CFG_BOOTFLAG 0 // 4 bytes


在rtl8198/rtl819x/linux-2.6.30/drivers/mtd/mtdcore.c:
增加函数：
mtd_flash_read(unsigned char * src, unsigned int addr, unsigned int cnt)
mtd_flash_write (unsigned char *src, unsigned int addr, unsigned int cnt)  --以后读取cfg-ext分区里面的数据，可以使用这两个函数，

static int bf_read_proc(char *page, char **start, off_t off,int count, int *eof, void *data)
static int bf_write_proc(struct file *file, const char *buffer,unsigned long count, void *data)

这两个函数使用了 CONFIG_CFG_BOOTFLAG 定义，后面如果需要增加保存在Flash的变量，可以在这后面增加定义

在rtl8198/rtl8198x/linux-2.6.30/arch/rlx/kernel/setup.c中arch_mem_init函数内增加：(-----------这里的功能是修改启动时mount文件系统选择-----------)
    fl_size = (((*((unsigned int *)(0xb8001204)))>>21) & 0x7);
    /*
        fl_size = 0,  -----   128kbyte flash
        fl_size = 1,  -----   256kbyte flash
        fl_size = 2,  -----   512kbyte flash
        fl_size = 3,  -----   1Mbyte flash
        fl_size = 4,  -----   2Mbyte flash
        fl_size = 5,  -----   4Mbyte flash
        fl_size = 6,  -----   8Mbyte flash
        fl_size = 7,  -----   16Mbyte flash
      */

    if(fl_size >= 6){
        bootflag = *((unsigned int *)(0xbd000000+CONFIG_CFG_EXT_START));
    }
    
    if(bootflag == 1){
        strlcpy(arcs_cmdline,CONFIG_CMDLINE2,sizeof(arcs_cmdline));
    }else{
        strlcpy(arcs_cmdline,CONFIG_CMDLINE,sizeof(arcs_cmdline));
    }
    
    pr_info("Raise from rootfs %d(flash size is %s)\n",bootflag,fsize[fl_size]);




[应用代码]：

app/master/sys/mtd_utils.h:

#define MTD_KERNEL_OFFSET_OP2 0x404000
#define MTD_KERNEL_SIZE_OP2  (0x530000 - MTD_KERNEL_OFFSET_OP2)

mtd_write_start函数内，根据rtl8198_get_bootflag()的结果来写入flash块


boot启动时，有打印：Boot raise from 1/0

kernel启动时，有打印：Raise from rootfs 1/0(flash size is ??byte)

可以挂一片4M或者一片8M的flash芯片


在cmd_system.c文件中，config节点下增加两个命令：show bootflag/ bootflag <0-1>可用于手动改变启动分区

***************************************************修改记录 <2> **************************************************
<2>  增加产测写MAC license功能
+==============================================================================================================+
  问题描述： 通过uboot写MAC地址，该mac地址会跟钥匙进行验证，钥匙正确才能写入成功。
                                                                                                           
  修改文件及代码说明：  
  
[boot修改]： 目录-->bootcode_rtl8196c_98
  
(1)/boot/Makefile 增加：

OBJFILES += $(OUTDIR)/cmd_manufacture_set.o


$(OUTDIR)/cmd_manufacture_set.o: ./init/cmd_manufacture_set.c
	$(CC) -c $(CFLAGS) -o $(OUTDIR)/cmd_manufacture_set.o ./init/cmd_manufacture_set.c
  
(2)/boot/include/linux/Autoconf2.h 增加：
  
#define CONFIG_MACAUTH 1 ( 通过该宏可以查找到 修改过的地方 )
#define CONFIG_AUTHCODE (CONFIG_CFG_EXT_OFFSET_START + 4) // has 32 bytes
#define CONFIG_ETHADDR (CONFIG_CFG_EXT_OFFSET_START + 36) // has 6 bytes
#define CONFIG_SN (CONFIG_CFG_EXT_OFFSET_START + 42) // has 32 bytes
#define CONFIG_HAEDVERSION (CONFIG_CFG_EXT_OFFSET_START + 74) // has 6 bytes
#define CONFIG_HAEDVERSION_LEN 6
  
(3)在monitor.c文件中，增加一个命令 ： MFG mac xx:xx:xx:xx:xx:xx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
#ifdef CONFIG_MACAUTH   
    {"MFG" ,3, do_manufacture_set    , "MFG: set MAC"},
#endif
增加看门狗喂狗开启、关闭功能，防止在输入写mac、SN、hver时出现重启。void wdt_feed()

(4)增加文件： /boot/init/Cmd_manufacture_set.c

[kernel改动]

(5)rtl8198/rtl819x/linux-2.6.30/include/linux/autoconf.h 文件：  增加 #define CONFIG_MACAUTH 1

(6)rtl8198/rtl819x/linux-2.6.30/drivers/net/rtl819x/rtl_nic.c 增加         
memcpy((char*)(&(vlanconfig[i].mac)),(char*)&READ_MEM32((0xbd000000+CONFIG_CFG_EXT_START+36)),ETHER_ADDR_LEN);

  注意事项：编译时不能执行 make menuconfig 和 make distclean 会造成 Autoconf2.h 和 autoconf.h 文件被修改，丢失宏定义。

  boot新增命令使用方法：
		不按<Esc>时，系统正常启动；
		按<Esc>进入<RealTek>命令行：
		MFG mac 40:C2:45:00:00:03 EEFA759A6AAE88DE478315D5C37176F8 ( AUTHCODE为32位 )
		MFG hver VER.B  ( ver最多6位 )
		MFG sn SN00000001 ( sn最多32位 )
		
		当输入完成以上三个命令后，看门狗自动开启，系统重启。

[编译改动]

在 rtl8198/rtl819x/ 中增加 build.sh 脚本，选择是否支持 MAC license功能，执行完会自动修改以下文件的宏CONFIG_MACAUTH ：
/bootcode_rtl8196c_98/.config
/bootcode_rtl8196c_98/boot/include/linux/autoconf2.h
rtl819x/linux-2.6.30/include/linux/autoconf.h

编译版本的步骤： 
	make clean
	make
 
  修改时间及作者邮箱： 2015-04-13 by lizhihui                                                                                            

***************************************************修改记录 <3> **************************************************
<3>  是否支持MAC license 功能版本编译
+==============================================================================================================+                                                                                                        
  修改文件及代码说明：  
  
[编译改动]

在 rtl8198/rtl819x/ 中增加 build.sh 脚本，选择是否支持 MAC license功能，执行完会自动修改以下文件的宏CONFIG_MACAUTH ：
/bootcode_rtl8196c_98/.config
/bootcode_rtl8196c_98/boot/include/linux/autoconf2.h
rtl819x/linux-2.6.30/include/linux/autoconf.h

编译版本的步骤： 
	make clean
	make
 
  修改时间及作者邮箱： 2015-04-15 by lizhihui                                                                                            

***************************************************修改记录 <4> **************************************************

<4>  版本升级须知
+==============================================================================================================+                                                                                                        
	目前uboot有两种状态：  
				  V1 老版本--2015-4-17号前发布
 					V2 新版本支持双备份(多了一个分区cfg-ext存放bootflag、MAC、SN、hver参数)
 													
 	升级过程：
 					V1 --> V2 : 直接升级.all 文件，启动后在 bootflag 0
 					V2 --> V1 : 两种情况：(1) 当bootflag = 0 , 要设置bootflag = 1 再升级老版本，不然cfg-ext分区丢失
																(2) 当bootflag = 1 , 直接升级老版本，启动后老版本在 0 分区	
																	
  注意避免以下-->导致cfg-ext分区丢失的错误升级过程：
              当 0 分区为新版本，1分区为旧版本时，再升级旧版本会出现。
   																											
  修改时间及作者邮箱： 2015-04-17 by lizhihui     
    
***************************************************修改记录 <5> **************************************************

  标题： 5  需要将管理vlan优先级的设置开放出来
+==============================================================================================================+
  问题描述： 平台问题，需要将管理vlan的优先级开放出来
  修改方法：  打开vlan 功能，在 rtl8198/rtl819x/linux-2.6.30/.config 文件中，修改了下面两个定义：
  
	CONFIG_RTK_VLAN_SUPPORT=y
	# CONFIG_RTK_VLAN_FOR_CABLE_MODEM is not set
	
	
  修改影响： 本修改后，需要重点测试VLAN逻辑，因为网卡驱动已经改变
  
  使用范围： 所有版本
                                                                                                               
  修改文件及代码说明：   版本号更改为 1.1.0.R8198        
  
  修改时间及作者邮箱： 2015-10-12 xxx@hexicomtech.com                                                                                            
+==============================================================================================================+


+==============================================================================================================+
  标题： 6  更改uart的模特率为115200
+==============================================================================================================+
  问题描述： 为了增加光机的功能，更改uart的模特率为115200

  修改原因：

  修改方法： 
  
           修改宏定义：
	   
	   bootcode_rtl8196c_98/btcode/start.h
	   
	   #define BAUD_RATE	  	(115200)
	   
	   bootcode_rtl8196c_98/boot/init/utility.h
	   
	   #define BAUD_RATE	  	(115200)
	   
	   
	   rtl819x/boards/rtl8198/tmpfs/include/appconfig.h
	   
	   #define CONFIG_CMDLINE "console=ttyS0,115200 root=/dev/mtdblock1"
	   #define CONFIG_CMDLINE2 "console=ttyS0,115200 root=/dev/mtdblock5"
	   
	   
	   rtl819x/linux-2.6.30/include/linux/autoconf.h
	   
	   #define CONFIG_CMDLINE "console=ttyS0,115200 root=/dev/mtdblock1"
	   
	   所有的宏定义 ： CONFIG_CMDLINE 和 CONFIG_CMDLINE2 都改成115200，

  修改影响： 只影响光机的功能
  
  使用范围： 需要升级all文件
                                                                                                               
  修改文件及代码说明：           
  
  修改时间及作者邮箱： 2015-11-06 luoruncai@hexicomtech.com                                                                                            
+==============================================================================================================+


+==============================================================================================================+
  标题： 7  更处理系统发出pause帧问题
+==============================================================================================================+
  问题描述： 在现场测试，发现局端会发出个pause帧，导致网卡工作异常

  修改方法： 
	   
	   删除宏定义： CONFIG_RTL_CUSTOM_PASSTHRU
	   
	   文件是： rtl819x/linux-2.6.30/drivers/net/rtl819x/l2Driver/rtl865x_fdb.h

	   这个修改方法可能可以规避这个问题，但到底能不能解决，还需要观察。
	   
	   如果还有问题，或许可以试试 ： REG32(SYS_CLK_MAG)|=(SYS_SW_RESET); 复位switch
	   或者： FullAndSemiReset()

  修改影响： 只影响是否可以接入系统
  
  使用范围： 需要升级all文件
                                                                                                               
  修改文件及代码说明：       版本号更改为 V1.1.3.R8198      
  
  修改时间及作者邮箱： 2016-1-15 luoruncai@hexicomtech.com                                                                                            
+==============================================================================================================+











